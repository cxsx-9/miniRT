# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    spare.text                                         :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: csantivi <csantivi@student.42bangkok.co    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2023/07/15 12:32:59 by csantivi          #+#    #+#              #
#    Updated: 2023/07/18 20:05:12 by csantivi         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "render.h"
#include "color.h"
#include "util.h"

t_vect	sky_color(t_vect c, t_scene *scene)
{
	t_vect	sky;
	t_al	*al;

	sky = color(0, 0, 0);
	al = scene->ambient_light;
	if (al)
		sky = mix_color(al->color, c, al->r, 0);
	c = mix_color(c, sky, 0.7, 1);
	return (c);
}

// t_vect	sky_color(t_vect c, t_scene *scene)
// {
// 	t_vect	sky;
// 	t_al	*al;

// 	sky = color(0, 0, 0);
// 	sky = add_ambient(sky, scene->ambient_light, 0);
// 	return (sky);
// }

// t_vect	ambient_light(t_pixel *p, t_scene *s, t_payload *load)
// {
// 	t_al	*al;
// 	t_vect	obj_color;

// 	al = s->ambient_light;
// 	if (!al || p->i > 0)
// 		return (p->c);
// 	obj_color = get_object_color(load->obj);
// 	return (mix_color(al->color, obj_color, al->r, 0));
// }

// -----------------   original
t_vect	point_light(t_pixel *p, t_scene *s, t_payload *load, t_ray *ray)
{
	t_light	*light;
	t_vect	obj_color;
	double	i;

	light = s->lights;
	while (light)
	{
		light->light_dir = normalize(sub_vect(light->center, ray->orig));
		if (!obj_block(*ray, s, light))
		{
			i = fmax(dot_product(load->world_norm, light->light_dir), 0.0);
			obj_color = multi_vect(get_object_color(load->obj), (i * light->b));
			p->c = add_vect(p->c, multi_vect(obj_color, p->multiplier));
		}
		light = light->next;
	}
	return (p->c);
}

t_vect	add_ambient(t_vect base, t_al *al, int i)
{
	if (!al || i > 0)
		return (base);
	return (mix_color(al->color, base, al->r, 0));
	// return (multi_vect(al->color, al->r));
}

t_vect	reverse_color(t_vect color)
{
	t_vect c;

	c.x = 1 - color.x;
	c.y = 1 - color.y;
	c.z = 1 - color.z;

	return (c);
}

t_vect	lighting(t_pixel *p, t_scene *s, t_payload *load, t_ray *ray)
{
	t_light	*light;
	t_vect	al;
	t_vect	obj_color;
	t_vect	result;
	double	intense;

	result = color(0,0,0);

	light = s->lights;
	// al = ambient(p, s, load);
	obj_color = get_object_color(load->obj);
	while (light)
	{
		light->light_dir = normalize(sub_vect(light->center, ray->orig));
		if (!obj_block(*ray, s, light))
		{
			// all intensity;
			intense = fmax(dot_product(load->world_norm, light->light_dir), 0.0);
			intense = intense * light->b * p->multiplier;

			// mixing light;
			result = add_vect(result, multi_vect(light->color, intense));
		}
		light = light->next;
	}
	result = sub_vect(result, reverse_color(obj_color));
	// result = add_ambient(result, s->ambient_light, p->i);
	result = mix_color(s->ambient_light->color, result, s->ambient_light->r, 0);
	return (result);
}
